name: Build|Test|Push|Deploy

on:
  push:
    branches:
      - prod

env:
  DEPLOYMENT_NAME: task2  # Add your deployment name here.
  IMAGE: task2

jobs:
  build-test-push-deploy:
    name: Build, Push to GCHR and Deploy to GKE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials, so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Declare docker tag variables
        id: vars
        shell: bash
        run: |
          GIT_HASH=$(git rev-parse --short "${GITHUB_SHA}")
          echo "##[set-output name=docker_tag;]$(echo ${GITHUB_REF##*/}-${GIT_HASH})"

      # Login Docker to GitHub
      - name: Login
        run: |-
          docker login ghcr.io -u ${{ secrets.GIT_USER }} -p ${{ secrets.GIT_KEY }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build --build-arg JAR_FILE=build/libs/Task2-0.0.1-SNAPSHOT.jar \
            --tag "ghcr.io/${{ secrets.GIT_USER }}/$IMAGE:${{ steps.vars.outputs.docker_tag }}" .
          
          docker build --build-arg JAR_FILE=build/libs/Task2-0.0.1-SNAPSHOT.jar \
            --tag "ghcr.io/${{ secrets.GIT_USER }}/$IMAGE:latest" .
      
      # Scan the Image
      - uses: azure/container-scan@v0
        with:
          image-name: ghcr.io/${{ secrets.GIT_USER }}/$IMAGE:${{ steps.vars.outputs.docker_tag }}

      # Push the Docker image to GitHub Container Registry
      - name: Publish
        run: |-
          docker push "ghcr.io/${{ secrets.GIT_USER }}/$IMAGE:${{ steps.vars.outputs.docker_tag }}"
          docker push "ghcr.io/${{ secrets.GIT_USER }}/$IMAGE:latest"

      # Deploy sample image to the GKE cluster
      # Initial deployment must be run from console in order to run delete commands properly.
      # kubectl create deployment task2 \
      #   --image=ghcr.io/${{ secrets.GIT_USER }}/$IMAGE:latest
      # kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=8080:8080
      - name: Deploy kubectl
        run: |-
          kubectl delete svc $DEPLOYMENT_NAME
          kubectl delete deploy task2
          kubectl create deployment task2 \
            --image=ghcr.io/${{ secrets.GIT_USER }}/$IMAGE:latest
          kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=8080:8080
          kubectl get deployments
          kubectl get services
